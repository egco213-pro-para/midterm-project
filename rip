
import java.util.*;
import java.io.*;
import java.nio.file.Files;


class Menu implements Comparable<Menu> {
    
    protected String name;
    protected int price;
    protected int dish=0;
    
    
    public String getMenu(){
        return name;
    }
    public int getPrice(){
        return price;
    }
    
    public int getdish(){
        return dish;
} 
    
    public void dish_amount(int totaldish){
        this.dish+=totaldish;
    }

    //get Menu name and price
    Menu(String n, int p){
        name=n;
        price=p;
    } 
    
    public int compareToIgnoreCase(Menu p){
        int comparePrice = ((Menu) p).getPrice();
        return comparePrice - this.price;
    }
   
    //normalprint
    public void report(){
    System.out.printf("Dish name: %-30s  Dish price : %d\n",name,price);
}
   
    @Override
    public int compareTo(Menu o) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }
}

class Customer implements Comparable <Customer> {
    Customer (String name, int[] customer){
    this.name = name;
    this.customer = customer;
    }
    Menu ptrmenu;
    
    public String name;
    public double point;
    public int []customer = {0,0,0,0,0};
    protected int totalbill=0;
    protected double totalpoints=0;
    
    int [] p = new int[5];
   
    Menu []mn= new Menu[5];
 
    protected void processOrder (int a[],  Menu []menu ){        
    {
        p[0]=a[0];
        p[1]=a[1];
        p[2]=a[2];
        p[3]=a[3];
        p[4]=a[4];
        
        for(int i=0;i<5;i++)
        {
        customer[i]+=p[i];
        }
        for(int h=0;h<5;h++)
        {
        mn[h].dish_amount(p[h]);
        }
        
      // int totalbill = mn[0]*price1 + mn[1]*price2 + mn[2]*price4 + mn[3]*price4 + mn[4]*price5; 
        if (p[4]==4)
        {
        mn[4].dish_amount(p[4]+(totalbill/1000));
        }
        totalpoints = totalbill/10;
    
    }
       
        
        this.point = totalpoints;
        System.out.printf("\n\norder bill = %6d", totalbill);
        System.out.printf("\ncurrent points = %6f", point);
        System.out.printf("\nfree dish %s = %6d", menu[4],totalbill/1000);
        
                
        
        double currentpt = totalpoints-500;
        if (totalpoints >= 500)
        {
            System.out.printf("final bill = %6d current points = %5d \n\n\n", (int)((totalbill*0.99)+40), currentpt);
        }
        else
        {
            System.out.printf("final bill = %6d current points = %5d \n\n\n", (int)(totalbill+40), point);
        }
     
    }
    
    public double compareToIgnoreCase(Customer p){
        double comparePoints = ((Customer) p).getPoint();
        return comparePoints - this.point;
    }
    
    
    public void SetPoint (double point)
    {
        this.point = point;
    }
    public double getPoint()
    {
        return point;
    }
    public String getName()
    {
        return name;
    }
  
    @Override
    public int compareTo(Customer o) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

}

public class Delivery {

    public static void main(String[] args) {
        // TODO code application logic here

        int count = 0;
        Menu[] menu = new Menu[5];
        ArrayList<Menu> menuList = new ArrayList<>();
        boolean correct_mfile = true;
      

        do {
            try {
                System.out.println("1) Please enter the menu file name: ");
                Scanner input = new Scanner(System.in);
                File file = new File(input.nextLine());
                input = new Scanner(file);
                
                

                while (input.hasNextLine()) {
                    String line = input.nextLine();
                    String[] buffer = line.split(",");

                    //send viable to menu
                    String menu_name = buffer[0];
                    int menu_price = Integer.parseInt(buffer[1].trim());
                    
                    //put the name/price to menu 
                    // but how to put in buff and can use in the processorder?
                    Menu x = new Menu(menu_name, menu_price);
                    menuList.add(x);

                }
                /*for(int i = 0; i< menuList.size();i++)
                System.out.println(menuList.get(i).getMenu());*/
                correct_mfile = false;
                input.close();

            } catch (Exception e) {
                
                System.err.println(e);
            }
        } while (correct_mfile);
        
        
        
        boolean correct_file = true;
        do {
            try {
                System.out.println("2) Please enter the order file name: ");
                Scanner input = new Scanner(System.in);
                File file = new File(input.nextLine());
                input = new Scanner(file);
                
                int check1 = 0;
                int check2 = 0;
                int x = 0;

                while (input.hasNextLine()) {
                    String line = input.nextLine();
                    String[] buffer = line.split(","); 
                    
                    String customer_name = buffer[0];
                    int[] customer_price = new int [5];
                    for(int i=1; i<6; i++)
                    { 
                      try{  
                      customer_price[i-1] = Integer.parseInt(buffer[i].trim());
                      }catch(NumberFormatException e)
                    {
                        customer_price[i-1] = x;
                    }
                    }
                    ArrayList<Customer> customerList = new ArrayList<>();
                    Customer y = new Customer(customer_name, customer_price );
                    customerList.add(y);
                  
                   
                    
                    boolean same_person = false;

                    //compare if customer name is the same or not
                    for (int i = 0; i < customerList.size(); i++) {

                        if (customerList.get(i).name.equalsIgnoreCase(customer_name)) {
                            same_person = true;
                            check1 = i;
                        }
                    }

                    //Show what the Customer order
                    if (same_person) {

                        System.out.printf("\n%5s >> order\n %s %d \n%s %d\n %s %d\n %s %d\n %s %d\n",
                                customer_name,
                                menuList.get(0).getMenu(), menuList.get(0).getPrice(),
                                menuList.get(1).getMenu(), menuList.get(1).getPrice(),
                                menuList.get(2).getMenu(), menuList.get(2).getPrice(),
                                menuList.get(3).getMenu(), menuList.get(3).getPrice(),
                                menuList.get(4).getMenu(), menuList.get(4).getPrice()
                        );
                        
                        
                        // send variable to Customer method
                        for(int i=0;i<customerList.size();i++)
                        {    
                        customerList.get(i).processOrder(menuList.getPrice(), menu);
                        }
                    } //False 
                    
                    
                    
                    else {
                        
                        //Create new Array list, show  Customer order
                        customerList.add(new Customer(customer_name,customer_price));
                        System.out.printf("\n%5s >> order\n %s %d\n %s %d\n %s %d\n %s %d\n %s %d\n",
                                customer_name,
                                menu[0].getMenu(), menuList.get(0).getPrice(),
                                menu[1].getMenu(), menuList.get(1).getPrice(),
                                menu[2].getMenu(), menuList.get(2).getPrice(),
                                menu[3].getMenu(), menuList.get(3).getPrice(),
                                menu[4].getMenu(), menuList.get(4).getPrice()
                        );
                        //send viable to Customer java
                        customerList.get(check2).processOrder(
                                menuList.get(0).getPrice(), menu[0].getPrice(),
                                menuList.get(1).getPrice(), menu[1].getPrice(),
                                menuList.get(2).getPrice(), menu[2].getPrice(),
                                menuList.get(3).getPrice(), menu[3].getPrice(),
                                menuList.get(4).getPrice(), menu[4].getPrice(),
                                count, menu);
                        check2++;
                    }
                }
                
                System.out.print("==== Customer summary ====\n");
                
                //print all of list in customer.
                Collections.sort(customerList);

                
                for (int ct = 0; ct < customerList.size(); ct++) {
                    System.out.printf("%s point = %7d\n",
                            customerList.get(ct).getName(),
                            customerList.get(ct).getPoint());
                }

                System.out.print("\n\n==== Menu summary ====\n");
                
                //print all of list in Arrays.
                Arrays.sort(menu);

                for (int ct = 0; ct < menu.length; ct++) {
                    System.out.printf("%-24s price = %6d total delivery = %5d\n",
                            menu[ct].getMenu(),
                            menu[ct].getPrice(),
                            menu[ct].getdish());
                }
                correct_file = false;
                input.close();

            } catch (FileNotFoundException e) {
                System.out.println("file not found");                
            }
        } while (correct_file);
    }
}
